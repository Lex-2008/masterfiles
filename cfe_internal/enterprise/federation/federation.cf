body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent federation_config
# @brief Read/parse config JSON, define variables and classes for use later
{
  vars:
    enterprise_edition.(policy_server|am_policy_hub)::
      "federation_dir" string => "/opt/cfengine/federation";
      "bin_dir" string => "$(federation_dir)/bin";
      "path" string => "$(federation_dir)/cfapache/federation-config.json";
  classes:
    enterprise_edition.(policy_server|am_policy_hub)::
      "cfengine_internal_federation_enabled"
        expression => fileexists("$(path)"),
        scope => "namespace";
  vars:
    cfengine_internal_federation_enabled::
      "data" data => readjson("$(path)");
      "remotes" slist => getindices(@(data[remote_hubs]));

  classes:
    cfengine_internal_federation_enabled::

      "cfengine_internal_federation_am_feeder"
        and => {strcmp("superhub", "$(data[remote_hubs][$(remotes)][role])"),
                strcmp("true", "$(data[remote_hubs][$(remotes)][enabled])")},
        comment => "Has a remote hub with superhub role, should act as feeder",
        scope => "namespace";

      "cfengine_internal_federation_am_superhub"
        and => {strcmp("feeder", "$(data[remote_hubs][$(remotes)][role])"),
                strcmp("true", "$(data[remote_hubs][$(remotes)][enabled])")},
        comment => "Has a remote hub with feeder role, should act as superhub",
        scope => "namespace";

      "cfengine_internal_federation_am_transporter"
        and => {strcmp("superhub", "$(data[remote_hubs][$(remotes)][role])"),
                strcmp("true", "$(data[remote_hubs][$(remotes)][enabled])"),
                strcmp("push_over_rsync", "$(data[remote_hubs][$(remotes)][transport][mode])")},
        comment => "Has an enabled remote superhub with push as transport method, should run transport ",
        scope => "namespace";

  reports:
    cfengine_internal_federation_enabled.(DEBUG|DEBUG_federation_config)::
      "Federation enabled!";
    cfengine_internal_federation_am_superhub.(DEBUG|DEBUG_federation_config)::
      "I'm a superhub!";
    cfengine_internal_federation_am_feeder.(DEBUG|DEBUG_federation_config)::
      "I'm a feeder!";
    cfengine_internal_federation_am_transporter.(DEBUG|DEBUG_federation_config)::
      "I'm a transporter!";
}

bundle agent federation_manage_cfdrop
# @brief Manage cfdrop user and permissions for remote SSH access
{
  vars:
      "user"
        string => "cfdrop";
      "home"
        string => "/home/$(user)";
      "create_files"
        slist => {
          "$(home)/.",
          "$(home)/.ssh/.",
          "$(home)/.ssh/authorized_keys"
        };
  classes:
    cfengine_internal_federation_enabled::
      "selinux_enabled"
        expression => strcmp("Enforcing", execresult("getenforce", useshell));
      "missing_ssh_context"
        expression => not(regcmp(".*[\s:]ssh_home_t[\s:].*",
                                 execresult("ls -Z $(home)/.ssh/authorized_keys",
                                            useshell)));
  users:
    "$(user)"
      policy => "present",
      home_dir => "$(home)";
  files:
    "$(create_files)"
      create => "true";
    "$(home)/."
      depth_search => recurse_with_base("inf"),
      file_select => all,
      perms => mo("600", "$(user)");
  commands:
    selinux_enabled.missing_ssh_context::
      "restorecon -F $(home)/.ssh/authorized_keys"
        contain => in_shell;
}


bundle agent federation_manage_files
# @brief Manage files, directories and permissions in /opt/cfengine/federation
{
  files:
    enterprise_edition.(policy_server|am_policy_hub)::
      "/opt/cfengine/federation/."
        create => "true",
        perms => mo("601", "root");
      "/opt/cfengine/federation/cfapache/."
        create => "true",
        perms => mo("600", "cfapache");
      "/opt/cfengine/federation/cfapache/."
        depth_search => recurse("inf"),
        file_select => all,
        perms => mo("600", "cfapache");
    cfengine_internal_federation_enabled::
      "$(federation_config.bin_dir)/."
        create => "true",
        perms => mo("600", "root");
    cfengine_internal_federation_am_superhub::
      "$(federation_config.federation_dir)/superhub/."
        create => "true",
        perms => mo("600", "root");
      "$(federation_config.federation_dir)/superhub/drop/."
        create => "true",
        perms => mo("600", "root");
      "$(federation_config.federation_dir)/superhub/import/."
        create => "true",
        perms => mo("600", "root");
    cfengine_internal_federation_am_feeder::
      "$(federation_config.federation_dir)/fedhub/."
        create => "true",
        perms => mo("600", "root");
      "$(federation_config.federation_dir)/fedhub/dump/."
        create => "true",
        perms => mo("600", "root");
      "$(federation_config.federation_dir)/fedhub/transport/."
        create => "true",
        perms => mo("600", "root");

    # TODO: Render these from templates:
    cfengine_internal_federation_am_feeder::
      "$(federation_config.bin_dir)/dump.sh"
        create => "true",
        perms => mo("600", "root");
    cfengine_internal_federation_am_transporter::
      "$(federation_config.bin_dir)/transport.sh"
        create => "true",
        perms => mo("600", "root");
    cfengine_internal_federation_am_superhub::
      "$(federation_config.bin_dir)/import.sh"
        create => "true",
        perms => mo("600", "root");
}

bundle agent federation_manage_database
# @brief Customize postgres config for superhub
{
  files:
    cfengine_internal_federation_am_superhub::
      "/var/cfengine/state/pg/data/postgresql.conf"
        edit_line => insert_lines("shared_buffers=1GB");
      "/var/cfengine/state/pg/data/postgresql.conf"
        edit_line => insert_lines("max_locks_per_transaction=4000");
}

bundle agent federation_manage_dump
# @brief Run script to dump pg data on feeder hub
{
  commands:
    cfengine_internal_federation_am_feeder::
      # TODO: pass correct arguments once script is done
      "bash"
        arglist => {"$(federation_config.bin_dir)/dump.sh",
                    "$(federation_config.federation_dir)/config.sh"},
        contain => in_shell;
}

bundle agent federation_manage_transport
# @brief Run script to transport data from feeder to superhub
{
  commands:
    cfengine_internal_federation_am_transporter::
      # TODO: pass correct arguments once script is done
      "bash"
        arglist => {"$(federation_config.bin_dir)/transport.sh",
                    "$(federation_config.federation_dir)/config.sh"},
        contain => in_shell;
}

bundle agent federation_manage_import
# @brief Run script to import dumps on superhub
{
  commands:
    cfengine_internal_federation_am_superhub::
      # TODO: pass correct arguments once script is done
      "bash"
        arglist => {"$(federation_config.bin_dir)/import.sh",
                    "$(federation_config.federation_dir)/config.sh"},
        contain => in_shell;
}

bundle agent federation_entry_bundle
# @brief Conditionally runs all federated reporting bundles
{
  meta:
    (policy_server|am_policy_hub).enterprise_edition::
      "tags" -> { "ENT-4383" }
        slist => { "enterprise_maintenance" };
  classes:
    enterprise_edition.(policy_server|am_policy_hub)::
      "federation_config_exists"
        expression => fileexists("/opt/cfengine/federation/cfapache/federation-config.json");
  methods:
    federation_config_exists::
      "federation_config"
        usebundle => federation_config;
    enterprise_edition.(policy_server|am_policy_hub)::
      "federation_manage_files"
        usebundle => federation_manage_files;
    cfengine_internal_federation_am_superhub::
      "federation_manage_cfdrop"
        usebundle => federation_manage_cfdrop;
    cfengine_internal_federation_enabled::
      "federation_manage_database"
        usebundle => federation_manage_database;
      "federation_manage_dump"
        usebundle => federation_manage_dump;
      "federation_manage_transport"
        usebundle => federation_manage_transport;
      "federation_manage_import"
        usebundle => federation_manage_import;
  reports:
    !enterprise_edition::
      "Federated reporting is only available in CFEngine Enterprise.";
    enterprise_edition.!(policy_server|am_policy_hub)::
      "Federated reporting is only available on the policy server / hub.";
}

bundle agent __main__
# @brief You can run this policy file from shell without specifying bundle
{
  methods:
    "federation_entry_bundle" usebundle => federation_entry_bundle;
}
