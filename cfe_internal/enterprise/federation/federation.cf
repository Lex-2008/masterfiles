body file control
{
        inputs => { "$(sys.libdir)/stdlib.cf" };
        namespace => "cfengine_enterprise_federation";
}

bundle agent config
# @brief Read/parse config JSON, define variables and classes for use later
{
  vars:
    enterprise_edition.(policy_server|am_policy_hub)::
      "federation_dir" string => "/opt/cfengine/federation";
      "bin_dir" string => "$(federation_dir)/bin";
      "path" string => "$(federation_dir)/cfapache/federation-config.json";
  classes:
    enterprise_edition.(policy_server|am_policy_hub)::
      "enabled"
        expression => fileexists( $(path) ),
        scope => "namespace";
  vars:
    enabled::
      "data" data => readjson( $(path) );
      "remotes" slist => getindices( @(data[remote_hubs]) );
      "login" string => ""; # default
      "login"
        string => "$(data[remote_hubs][$(remotes)][transport][ssh_user])@$(data[remote_hubs][$(remotes)][transport][ssh_host])",
            if => and(
                       # To ensure we are using a remote hub that's actually enabled
                       strcmp( "true", "$(data[remote_hubs][$(remotes)][enabled])" ),
                       # To ensure the remote we are pushing to actually needs the data (is a superhub)
                       strcmp( "superhub", "$(data[remote_hubs][$(remotes)][role])" ));
      "pubkey[$(remotes)]" string => "$(data[remote_hubs][$(remotes)][transport][ssh_pubkey])",
            if => and(
                       # To ensure we are using a remote hub that's actually enabled
                       strcmp( "true", "$(data[remote_hubs][$(remotes)][enabled])" ),
                       # To ensure the remote is a feeder that we need to add to superhub's authorized_keys
                       strcmp( "feeder", "$(data[remote_hubs][$(remotes)][role])" ));
      "pubkeys" slist => getvalues( pubkey );
      
  classes:
    enabled::

      "am_feeder"
        and => {strcmp("superhub", "$(data[remote_hubs][$(remotes)][role])"),
                strcmp("true", "$(data[remote_hubs][$(remotes)][enabled])")},
        comment => "Has a remote hub with superhub role, should act as feeder",
        scope => "namespace";

      "am_superhub"
        and => {strcmp("feeder", "$(data[remote_hubs][$(remotes)][role])"),
                strcmp("true", "$(data[remote_hubs][$(remotes)][enabled])")},
        comment => "Has a remote hub with feeder role, should act as superhub",
        scope => "namespace";

      "am_transporter"
        and => {strcmp("superhub", "$(data[remote_hubs][$(remotes)][role])"),
                strcmp("true", "$(data[remote_hubs][$(remotes)][enabled])"),
                strcmp("push_over_rsync", "$(data[remote_hubs][$(remotes)][transport][mode])")},
        comment => "Has an enabled remote superhub with push as transport method, should run transport ",
        scope => "namespace";

  reports:
    enabled.(DEBUG|DEBUG_config)::
      "Federation enabled!";
    am_superhub.(DEBUG|DEBUG_config)::
      "I'm a superhub!";
    am_feeder.(DEBUG|DEBUG_config)::
      "I'm a feeder!";
    am_transporter.(DEBUG|DEBUG_config)::
      "I'm a transporter!";
}

bundle agent transport_user
# @brief Manage cfdrop user and permissions for remote SSH access
{
  vars:
      "user"
        string => "cfdrop";
      "home"
        string => "$(cfengine_enterprise_federation:config.federation_dir)/superhub/drop";

      "ssh_key_type" string => "ed25519";
      "ssh_priv_key" string => "$(home)/.ssh/id_$(ssh_key_type)";
      "ssh_pub_key" string => "$(home)/.ssh/id_$(ssh_key_type).pub";
      "ssh_auth_keys" string => "$(home)/.ssh/authorized_keys";
      
      "create_files"
        slist => {
          "$(home)/.",
          "$(home)/.ssh/.",
          "$(ssh_auth_keys)"
        };
  classes:
    enabled::
      "selinux_enabled"
        expression => strcmp("Enforcing", execresult("getenforce", useshell));
      "missing_ssh_context"
        expression => not( or(
                               regcmp(".*[\s:]ssh_home_t[\s:].*",
                                      execresult("ls -Z $(ssh_auth_keys)",
                                                 useshell)),
                               regcmp(".*[\s:]ssh_home_t[\s:].*",
                                      execresult("ls -Z $(ssh_priv_key)",
                                                 useshell)),
                               regcmp(".*[\s:]ssh_home_t[\s:].*",
                                      execresult("ls -Z $(ssh_pub_key)",
                                                 useshell))));
  users:
    "$(user)"
      policy => "present",
      home_dir => "$(home)";
  files:
    "$(create_files)"
      create => "true";
    "$(home)/."
      depth_search => default:recurse_with_base("inf"),
      file_select => default:all,
      perms => default:mog( "600", $(user), "root" );
    "$(ssh_auth_keys)"
      create => "true",
      edit_template_string => "{{#-top-}}{{{.}}}$(const.n){{/-top-}}",
      template_data => @(cfengine_enterprise_federation:config.pubkeys),
      template_method => "inline_mustache";

  commands:
    # Generate a modern ssh keypair (2019-04)
    "/usr/bin/ssh-keygen"
      handle => "ssh_keys_configured",
      args => "-N '' -a 150 -t $(ssh_key_type) -f $(ssh_priv_key)",
      if => and( isdir( "$(home)/.ssh" ),
                 not( fileexists( "$(ssh_priv_key)" )));

    selinux_enabled.missing_ssh_context::
      "restorecon -R -F  $(home)/.ssh/"
        contain => default:in_shell;
}


bundle agent federation_manage_files
# @brief Manage files, directories and permissions in $(cfengine_enterprise_federation:config.federation_dir)
{
  files:
    enterprise_edition.(policy_server|am_policy_hub)::
      "$(cfengine_enterprise_federation:config.federation_dir)/."
        create => "true",
        perms => default:mog( "701", "root", "root" );
      "$(cfengine_enterprise_federation:config.federation_dir)/cfapache/."
        create => "true",
        perms => default:mog( "600", "cfapache", "root" );
      "$(cfengine_enterprise_federation:config.federation_dir)/cfapache/."
        depth_search => default:recurse_with_base("inf"),
        file_select => default:all,
        perms => default:mog( "600", "cfapache", "root" );
    enabled::
      "$(cfengine_enterprise_federation:config.bin_dir)/."
        create => "true",
        perms => default:mog( "600", "root", "root" );
    am_superhub::
      "$(cfengine_enterprise_federation:config.federation_dir)/superhub/."
        create => "true",
        perms => default:mog( "701", "root", "root" );
      "$(cfengine_enterprise_federation:config.federation_dir)/superhub/import/."
        create => "true",
        perms => default:mog( "600", "root", "root" );
      "$(cfengine_enterprise_federation:config.federation_dir)/superhub/import/filters/."
        create => "true",
        perms => default:mog( "600", "root", "root" );
    am_feeder::
      "$(cfengine_enterprise_federation:config.federation_dir)/fedhub/."
        create => "true",
        perms => default:mog( "600", "root", "root" );
      "$(cfengine_enterprise_federation:config.federation_dir)/fedhub/dump/."
        create => "true",
        perms => default:mog( "600", "root", "root" );
      "$(cfengine_enterprise_federation:config.federation_dir)/fedhub/transport/."
        create => "true",
        perms => default:mog( "600", "root", "root" );

    # TODO: Render these from templates:

    am_feeder|am_transporter|am_superhub::
      # TODO: Instrument augments
      "$(cfengine_enterprise_federation:config.bin_dir)/config.sh"
        create => "true",
        template_method => "mustache",
        edit_template => "$(this.promise_dirname)/../../../templates/federated_reporting/config.sh.mustache",
        template_data => parsejson('{"login":"$(cfengine_enterprise_federation:config.login)"}'),
        perms => default:mog( "600", "root", "root" );

      # TODO: Instrument augments
      "$(cfengine_enterprise_federation:config.bin_dir)/log.sh"
        create => "true",
        template_method => "mustache",
        edit_template => "$(this.promise_dirname)/../../../templates/federated_reporting/log.sh.mustache",
        perms => default:mog( "600", "root", "root" );

      "$(cfengine_enterprise_federation:config.bin_dir)/parallel.sh"
        copy_from => default:local_dcp( "$(this.promise_dirname)/../../../templates/federated_reporting/parallel.sh" ),
        perms => default:mog( "600", "root", "root" );

    am_feeder::
      "$(cfengine_enterprise_federation:config.bin_dir)/dump.sh"
        copy_from => default:local_dcp( "$(this.promise_dirname)/../../../templates/federated_reporting/dump.sh" ),
        perms => default:mog( "700", "root", "root" );

    am_transporter::
      "$(cfengine_enterprise_federation:config.bin_dir)/transport.sh"
        copy_from => default:local_dcp( "$(this.promise_dirname)/../../../templates/federated_reporting/transport.sh" ),
        perms => default:mog( "700", "root", "root" );

    am_superhub::
      "$(cfengine_enterprise_federation:config.bin_dir)/import.sh"
        copy_from => default:local_dcp( "$(this.promise_dirname)/../../../templates/federated_reporting/import.sh" ),
        perms => default:mog( "700", "root", "root" );

      "$(cfengine_enterprise_federation:config.bin_dir)/import_file.sh"
        copy_from => default:local_dcp( "$(this.promise_dirname)/../../../templates/federated_reporting/import_file.sh" ),
        perms => default:mog( "700", "root", "root" );

      "$(cfengine_enterprise_federation:config.federation_dir)/superhub/import/filters/filter.sed"
        create => "true",
        template_method => "mustache",
        edit_template => "$(this.promise_dirname)/../../../templates/federated_reporting/filter.sed.mustache",
        perms => default:mog( "600", "root", "root" );


}

bundle agent postgres_config
# @brief Customize postgres config for superhub
{
  vars:
    am_superhub::
      "c[shared_buffers]" string => "1GB";
      "c[max_locks_per_transaction]" string => "4000";
      
  files:
    am_superhub::
      "/var/cfengine/state/pg/data/postgresql.conf"
        edit_line => default:set_line_based( "$(this.bundle).c",
                                     "=",
                                     "\s*=\s*",
                                     ".*",
                                     "");
}

bundle agent exported_data
# @brief Run script to dump pg data on feeder hub
{
  commands:
    am_feeder::
      # TODO: pass correct arguments once script is done
      "bash"
        arglist => {"$(cfengine_enterprise_federation:config.bin_dir)/dump.sh"},
        contain => default:in_shell;
}

bundle agent data_transport
# @brief Run script to transport data from feeder to superhub
{
  commands:
    am_transporter::
      # TODO: pass correct arguments once script is done
      "bash"
        arglist => {"$(cfengine_enterprise_federation:config.bin_dir)/transport.sh"},
        contain => default:in_shell;
}

bundle agent imported_data
# @brief Run script to import dumps on superhub
{
  commands:
    am_superhub::
      # TODO: pass correct arguments once script is done
      "bash"
        arglist => {"$(cfengine_enterprise_federation:config.bin_dir)/import.sh"},
        contain => default:in_shell;
}

bundle agent entry
# @brief Conditionally runs all federated reporting bundles
{
  meta:
    (policy_server|am_policy_hub).enterprise_edition::
      "tags" -> { "ENT-4383" }
        slist => { "enterprise_maintenance" };
  classes:
    enterprise_edition.(policy_server|am_policy_hub)::
      "config_exists"
        expression => fileexists("$(cfengine_enterprise_federation:config.federation_dir)/cfapache/federation-config.json");
  methods:
    config_exists::
      "CFEngine Enterprise Federation Configuration"
        usebundle => config;
    enterprise_edition.(policy_server|am_policy_hub)::
      "federation_manage_files"
        usebundle => federation_manage_files;
    am_superhub|am_feeder::
      "CFEngine Enterprise Federation Transport User"
        usebundle => transport_user;
    enabled::
      "CFEngine Enterprise Federation Postgres Configuration"
        usebundle => postgres_config;
      "CFEngine Enterprise Federation Feeder Data Export"
        usebundle => exported_data;
      "CFEngine Enterprise Federation Feeder Data Transport"
        usebundle => data_transport;
      "CFEngine Enterprise Federation Feeder Data Import"
        usebundle => imported_data;
  reports:
    !enterprise_edition::
      "Federated reporting is only available in CFEngine Enterprise.";
    enterprise_edition.!(policy_server|am_policy_hub)::
      "Federated reporting is only available on the policy server / hub.";
}

body file control
{
        namespace => "default";
}

bundle agent __main__
# @brief You can run this policy file from shell without specifying bundle
{
  methods:
    "entry" usebundle => cfengine_enterprise_federation:entry;
}
